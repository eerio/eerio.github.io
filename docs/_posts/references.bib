@MISC {3926446,
    TITLE = {Is there (or can there be) a general algorithm to solve Rubik&#39;s cubes of any dimension?},
    AUTHOR = {ahulpke (https://math.stackexchange.com/users/159739/ahulpke)},
    HOWPUBLISHED = {Mathematics Stack Exchange},
    NOTE = {URL:https://math.stackexchange.com/q/3926446 (version: 2020-11-28)},
    EPRINT = {https://math.stackexchange.com/q/3926446},
    URL = {https://math.stackexchange.com/q/3926446}
}

@inproceedings{10.1145/99370.99404,
author = {Wadler, Philip},
title = {Theorems for free!},
year = {1989},
isbn = {0897913280},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/99370.99404},
doi = {10.1145/99370.99404},
booktitle = {Proceedings of the Fourth International Conference on Functional Programming Languages and Computer Architecture},
pages = {347–359},
numpages = {13},
location = {Imperial College, London, United Kingdom},
series = {FPCA '89}
}

@MISC {18919,
    TITLE = {How to minimize a FSM transducer?},
    AUTHOR = {Sylvain (https://cstheory.stackexchange.com/users/609/sylvain)},
    HOWPUBLISHED = {Theoretical Computer Science Stack Exchange},
    NOTE = {URL:https://cstheory.stackexchange.com/q/18919 (version: 2013-09-08)},
    EPRINT = {https://cstheory.stackexchange.com/q/18919},
    URL = {https://cstheory.stackexchange.com/q/18919}
}

@misc{filiot2013twoway,
      title={From Two-Way to One-Way Finite State Transducers}, 
      author={Emmanuel Filiot and Olivier Gauwin and Pierre-Alain Reynier and Frédéric Servais},
      year={2013},
      eprint={1301.5197},
      archivePrefix={arXiv},
      primaryClass={cs.FL}
}

@InProceedings{10.1007/11780885_38,
author="Schmid, Helmut",
editor="Yli-Jyr{\"a}, Anssi
and Karttunen, Lauri
and Karhum{\"a}ki, Juhani",
title="A Programming Language for Finite State Transducers",
booktitle="Finite-State Methods and Natural Language Processing",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="308--309",
abstract="SFST-PL is a programming language for finite-state transducers which is based on extended regular expressions with variables. SFST-PL is used by the Stuttgart Finite-State-Transducer (SFST) tools which are available under the GNU public license. SFST-PL was designed as a general programming language for the development of tokenizers, pattern recognizers, computational morphologies and other FST applications. The first SFST application was the SMOR morphology [1], a large-scale German morphology which covers composition, derivation and inflection. An SFST program consists of a list of variable and alphabet assignments followed by a single regular expression which defines the resulting transducer.",
isbn="978-3-540-35469-7"
}
